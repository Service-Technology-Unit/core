package edu.ucdavis.ucdh.stu.core.servlets.impl;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;

import edu.ucdavis.ucdh.stu.core.beans.LookupTable;
import edu.ucdavis.ucdh.stu.core.beans.LookupTableEntry;
import edu.ucdavis.ucdh.stu.core.beans.LookupTableProperty;
import edu.ucdavis.ucdh.stu.core.manager.LookupTableEntryManager;
import edu.ucdavis.ucdh.stu.core.manager.LookupTableManager;
import edu.ucdavis.ucdh.stu.core.servlets.JavascriptServletBase;

/**
 * <p>This servlet produces the Javascript necessary to support the look-up
 * table entry edit process.</p>
 */
public class LookupTablePropertyJavascriptServlet extends JavascriptServletBase {
	private static final long serialVersionUID = 1;
	private String propertyTypeTableContext = "global";
	private String propertyTypeTableName = "dataType";
	private String inputControlPropertyName = "inputControl";
	private String populationScriptPropertyName = "populationScript";
	private String validationScriptPropertyName = "validationScript";
	private String formatScriptPropertyName = "formatScript";
	private LookupTableManager lookupTableManager;
	private LookupTableEntryManager lookupTableEntryManager;

	/**
	 * <p>The Servlet "doGet()" method.</p>
	 *
	 * @param req the <code>HttpServletRequest</code> object
	 * @param res the <code>HttpServletResponse</code> object
	 * @throws ServletException
	 * @throws IOException
	 */
	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// log request, if enabled
		if (log.isDebugEnabled()) {
			String message = "Processing GET request";
			if (req.getQueryString() != null && req.getQueryString().length() > 0) {
				message += "; query string=" + req.getQueryString();
			}
			log.debug(message);
		}

		LookupTable lookupTable = lookupTableManager.findByContextAndTableName(propertyTypeTableContext, propertyTypeTableName);
		if (lookupTable != null && lookupTable.getProperties() != null  && lookupTable.getProperties().size() > 0) {
			List<LookupTableEntry> propertyTypes = lookupTableEntryManager.findByContextAndTableName(propertyTypeTableContext, propertyTypeTableName);
			if (propertyTypes != null && propertyTypes.size() > 0) {
				PrintWriter pw = res.getWriter();
				pw.println(buildJavascript(lookupTable, propertyTypes));
			} else {
				// send error
				sendError(req, res, 404, "The look-up table with context \"" + propertyTypeTableContext + "\" and name \"" + propertyTypeTableName + "\" was either not defined or empty.");
			}
		} else {
			// send error
			sendError(req, res, 404, "The look-up table with context \"" + propertyTypeTableContext + "\" and name \"" + propertyTypeTableName + "\" was either not defined or empty.");
		}
	}

	/**
	 * <p>Builds and sends the Javascript.</p>
	 *
	 * @param lookupTable the property type table definition
	 * @param propertyTypes the list property type table entries
	 * @return the generated Javascript
	 */
	private String buildJavascript(LookupTable lookupTable, List<LookupTableEntry> propertyTypes) {
		StringBuffer buffer = new StringBuffer();

		int inputControlProperty = -1;
		int populationScriptProperty = -1;
		int validationScriptProperty = -1;
		int formatScriptProperty = -1;
		int x = 0;
		Iterator<LookupTableProperty> i = lookupTable.getProperties().iterator();
		while (i.hasNext()) {
			LookupTableProperty thisProperty = i.next();
			String name = thisProperty.getName();
			if (inputControlPropertyName.equalsIgnoreCase(name)) {
				inputControlProperty = x;
			} else if (populationScriptPropertyName.equalsIgnoreCase(name)) {
				populationScriptProperty = x;
			} else if (validationScriptPropertyName.equalsIgnoreCase(name)) {
				validationScriptProperty = x;
			} else if (formatScriptPropertyName.equalsIgnoreCase(name)) {
				formatScriptProperty = x;
			}
			x++;
		}
		if (inputControlProperty > -1 && populationScriptProperty > -1 && validationScriptProperty > -1 && formatScriptProperty > -1) {
			buffer.append("// generated by \"" + getClass().getName() + "\"\n\n");
			buffer.append("var entryEditConfig = {};\n");
			buffer.append("entryEditConfig.property = [];\n");
			buffer.append("entryEditConfig.source = {};\n");
			buffer.append("entryEditConfig.propertyType = {};\n");
			Iterator<LookupTableEntry> j = propertyTypes.iterator();
			while (j.hasNext()) {
				LookupTableEntry thisEntry = j.next();
				buffer.append("entryEditConfig.propertyType['");
				buffer.append(thisEntry.getEntryId());
				buffer.append("'] = {id: '");
				buffer.append(thisEntry.getEntryId());
				buffer.append("', description: '");
				buffer.append(thisEntry.getDescription());
				buffer.append("', inputControl: '");
				buffer.append(thisEntry.getProperty(inputControlProperty));
				buffer.append("'};\n");
			}
			buffer.append("\n");
			buffer.append("function getInputControl(propertyIndex) {\n");
			buffer.append("	var type = entryEditConfig.property[propertyIndex].type;\n");
			buffer.append("	var html = entryEditConfig.propertyType[type].inputControl;\n");
			buffer.append("	if (entryEditConfig.property[propertyIndex].source > '') {\n");
			buffer.append("		html = '<select id=\"{0}\"></select>';\n");
			buffer.append("	}\n");
			buffer.append("	html = html.replace(/\\{0\\}/g, entryEditConfig.property[propertyIndex].tagName);\n");
			buffer.append("	var size = entryEditConfig.property[propertyIndex].size;\n");
			buffer.append("	var sizeNbr = parseInt(size);\n");
			buffer.append("	if (sizeNbr > 0) {\n");
			buffer.append("		if (size.indexOf('.') != -1) {\n");
			buffer.append("			var parts = size.split('.');\n");
			buffer.append("			sizeNbr = parseInt(parts[0]) + parseInt(parts[1]) + 1;\n");
			buffer.append("		}\n");
			buffer.append("		var boxSize = parseInt(((sizeNbr + 1)/2) + '');\n");
			buffer.append("		if (boxSize > 60) {\n");
			buffer.append("			boxSize = 60;\n");
			buffer.append("		}\n");
			buffer.append("		html = html.replace(/\\{1\\}/g, sizeNbr + '');\n");
			buffer.append("		html = html.replace(/\\{2\\}/g, boxSize + '');\n");
			buffer.append("	}\n");
			buffer.append("	return html;\n");
			buffer.append("}\n\n");
			buffer.append("function populateForm(propertyIndex) {\n");
			buffer.append("	var type = entryEditConfig.property[propertyIndex].type;\n");
			buffer.append("	var value = entryEditConfig.property[propertyIndex].value;\n");
			buffer.append("	var tagName = entryEditConfig.property[propertyIndex].tagName;\n");
			buffer.append("	var source = entryEditConfig.property[propertyIndex].source;\n");
			buffer.append("	if (source > '') {\n");
			buffer.append("		var required = entryEditConfig.property[propertyIndex].inputRequired;\n");
			buffer.append("		setUpSelectOptions(document.getElementById(tagName), entryEditConfig.source[source], value, required);\n");
			buffer.append("	} else {\n");
			j = propertyTypes.iterator();
			while (j.hasNext()) {
				LookupTableEntry thisEntry = j.next();
				buffer.append("		if (type == '");
				buffer.append(thisEntry.getEntryId());
				buffer.append("') {\n");
				String[] lines = getIndividualLines(thisEntry.getProperty(populationScriptProperty));
				if (lines != null && lines.length > 0) {
					for (int a=0; a<lines.length; a++) {
						buffer.append("			");
						buffer.append(lines[a]);
						buffer.append("\n");
					}
				} else {
					buffer.append("		// no script defined\n");
				}
				buffer.append("		}\n");
			}
			buffer.append("	}\n");
			buffer.append("}\n\n");
			buffer.append("function setUpSelectOptions(elem, options, value, required) {\n");
			buffer.append("	var i = 0;\n");
			buffer.append("	i = parseInt(elem.length);\n");
			buffer.append("	while (i > 0) {\n");
			buffer.append("		i--;\n");
			buffer.append("		elem.options[i] = null;\n");
			buffer.append("	}\n");
			buffer.append("	var j = 0;\n");
			buffer.append("	if (!required) {\n");
			buffer.append("		elem.options[j] = new Option(' (none)', '');\n");
			buffer.append("		j++;\n");
			buffer.append("	}\n");
			buffer.append("	for (i=0; i<options.length; i++) {\n");
			buffer.append("		elem.options[j] = new Option(options[i].label, options[i].value);\n");
			buffer.append("		if (value > '') {\n");
			buffer.append("		 	if (elem.options[j].value == value) {\n");
			buffer.append("				elem.options[j].selected = true;\n");
			buffer.append("			}\n");
			buffer.append("		}\n");
			buffer.append("		j++;\n");
			buffer.append("	}\n");
			buffer.append("	if (!(value > '')) {\n");
			buffer.append("		elem.options[0].selected = true;\n");
			buffer.append("	}\n");
			buffer.append("}\n\n");
			buffer.append("function validateProperty(propertyIndex) {\n");
			buffer.append("	var name = entryEditConfig.property[propertyIndex].name;\n");
			buffer.append("	var type = entryEditConfig.property[propertyIndex].type;\n");
			buffer.append("	var size = entryEditConfig.property[propertyIndex].size;\n");
			buffer.append("	var label = entryEditConfig.property[propertyIndex].label;\n");
			buffer.append("	var required = entryEditConfig.property[propertyIndex].inputRequired;\n");
			buffer.append("	var value = '';\n");
			buffer.append("	var tagName = entryEditConfig.property[propertyIndex].tagName;\n");
			j = propertyTypes.iterator();
			while (j.hasNext()) {
				LookupTableEntry thisEntry = j.next();
				buffer.append("	if (type == '");
				buffer.append(thisEntry.getEntryId());
				buffer.append("') {\n");
				String[] lines = getIndividualLines(thisEntry.getProperty(validationScriptProperty));
				if (lines != null && lines.length > 0) {
					for (int a=0; a<lines.length; a++) {
						buffer.append("		");
						buffer.append(lines[a]);
						buffer.append("\n");
					}
				} else {
					buffer.append("	// no script defined\n");
				}
				buffer.append("	}\n");
			}
			buffer.append("	entryEditConfig.property[propertyIndex].value = value;\n");
			buffer.append("}\n");
		}

		return buffer.toString();
	}

	/**
	 * <p>Splits a text block into its individual lines.</p>
	 *
	 * @param text the text to split up
	 * @return the split-up text
	 */
	private String[] getIndividualLines(String text) {
		String[] lines = new String[0];

		if (StringUtils.isNotEmpty(text)) {
			text = text.replace("\r\n","\n");
			text = text.replace("\r","\n");
			lines = text.split("\n");
		}

		return lines;
	}

	/**
	 * <p>Sets the propertyTypeTableContext.</p>
	 *
	 * @param propertyTypeTableContext the propertyTypeTableContext
	 */
	public void setPropertyTypeTableContext(String propertyTypeTableContext) {
		this.propertyTypeTableContext = propertyTypeTableContext;
	}

	/**
	 * <p>Sets the propertyTypeTableName.</p>
	 *
	 * @param propertyTypeTableName the propertyTypeTableName
	 */
	public void setPropertyTypeTableName(String propertyTypeTableName) {
		this.propertyTypeTableName = propertyTypeTableName;
	}

	/**
	 * <p>Sets the lookupTableManager.</p>
	 *
	 * @param lookupTableManager the lookupTableManager
	 */
	public void setLookupTableManager(LookupTableManager lookupTableManager) {
		this.lookupTableManager = lookupTableManager;
	}

	/**
	 * <p>Sets the lookupTableEntryManager.</p>
	 *
	 * @param lookupTableEntryManager the lookupTableEntryManager
	 */
	public void setLookupTableEntryManager(LookupTableEntryManager lookupTableEntryManager) {
		this.lookupTableEntryManager = lookupTableEntryManager;
	}

	/**
	 * <p>Sets the formatScriptPropertyName.</p>
	 *
	 * @param formatScriptPropertyName the formatScriptPropertyName
	 */
	public void setFormatScriptPropertyName(String formatScriptPropertyName) {
		this.formatScriptPropertyName = formatScriptPropertyName;
	}

	/**
	 * <p>Sets the inputControlPropertyName.</p>
	 *
	 * @param inputControlPropertyName the inputControlPropertyName
	 */
	public void setInputControlPropertyName(String inputControlPropertyName) {
		this.inputControlPropertyName = inputControlPropertyName;
	}

	/**
	 * <p>Sets the populationScriptPropertyName.</p>
	 *
	 * @param populationScriptPropertyName the populationScriptPropertyName
	 */
	public void setPopulationScriptPropertyName(String populationScriptPropertyName) {
		this.populationScriptPropertyName = populationScriptPropertyName;
	}

	/**
	 * <p>Sets the validationScriptPropertyName.</p>
	 *
	 * @param validationScriptPropertyName the validationScriptPropertyName
	 */
	public void setValidationScriptPropertyName(String validationScriptPropertyName) {
		this.validationScriptPropertyName = validationScriptPropertyName;
	}
}
