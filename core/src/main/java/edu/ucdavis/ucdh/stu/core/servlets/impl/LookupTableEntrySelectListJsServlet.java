package edu.ucdavis.ucdh.stu.core.servlets.impl;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import edu.ucdavis.ucdh.stu.core.beans.LookupTable;
import edu.ucdavis.ucdh.stu.core.beans.LookupTableProperty;
import edu.ucdavis.ucdh.stu.core.manager.LookupTableManager;
import edu.ucdavis.ucdh.stu.core.servlets.JavascriptServletBase;

/**
 * <p>This servlet produces the Javascript necessary to support the look-up
 * table entry ajax pick list.</p>
 */
public class LookupTableEntrySelectListJsServlet extends JavascriptServletBase {
	private static final long serialVersionUID = 1;
	private String servletPath = "/optlistjs/";
	private String baseDataURL = "/core/optlist/";
	private LookupTableManager lookupTableManager;
	private Map<String,LookupTable> tableDefinition = new HashMap<String,LookupTable>();

	/**
	 * <p>The Servlet "doGet()" method.</p>
	 *
	 * @param req the <code>HttpServletRequest</code> object
	 * @param res the <code>HttpServletResponse</code> object
	 * @throws ServletException
	 * @throws IOException
	 */
	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		// log request, if enabled
		if (log.isDebugEnabled()) {
			String message = "Processing GET request";
			if (req.getQueryString() != null && req.getQueryString().length() > 0) {
				message += "; query string=" + req.getQueryString();
			}
			log.debug(message);
		}

		String id = getIdFromUrl(req, servletPath);
		if (id.indexOf(".js") != -1) {
			id = id.substring(0, id.indexOf(".js"));
		}
		LookupTable thisTable = null;
		if (id.indexOf("/") != -1) {
			// split id into context and table name
			String[] parts = id.split("/");
			String context = parts[0];
			String tableName = parts[1];
			thisTable = getTableDefinition(context, tableName);
		}
		if (thisTable != null) {
			PrintWriter pw = res.getWriter();
			pw.println(buildJavascript(thisTable));
		} else {
			// send error
			sendError(req, res, 404, "The look-up table with id \"" + id + "\" was not defined.");
		}
	}

	/**
	 * <p>This method returns the table definition for the specified table.</p>
	 *
	 * @param context the context of the requested lookupTable
	 * @param tableName the name of the requested lookupTable
	 * @return the table definition for the specified table
	 */
	private LookupTable getTableDefinition(String context, String tableName) {
		String key = context + "/" + tableName;
		if (!tableDefinition.containsKey(key)) {
			tableDefinition.put(key, lookupTableManager.findByContextAndTableName(context, tableName));
		}
		return tableDefinition.get(key);
	}

	/**
	 * <p>Builds and returns the Javascript.</p>
	 *
	 * @param lookupTable the table definition
	 * @return the generated Javascript
	 */
	private String buildJavascript(LookupTable lookupTable) {
		StringBuffer buffer = new StringBuffer();

		buffer.append("// generated by \"" + getClass().getName() + "\"\n\n");
		buffer.append("function standardSetUp() {\n");
		buffer.append("	fieldName = [\n");
		buffer.append("		'id',\n");
		buffer.append("		'description'");
		if (lookupTable.getProperties() != null && lookupTable.getProperties().size() > 0) {
			Iterator<LookupTableProperty> i = lookupTable.getProperties().iterator();
			while (i.hasNext()) {
				LookupTableProperty thisProperty = i.next();
				buffer.append(",\n		'");
				buffer.append(thisProperty.getName());
				buffer.append("'");
			}
		}
		buffer.append("];\n");
		buffer.append("	fieldIndex = {\n");
		buffer.append("		'id': 0,\n");
		buffer.append("		'description': 1");
		if (lookupTable.getProperties() != null && lookupTable.getProperties().size() > 0) {
			int x = 2;
			Iterator<LookupTableProperty> i = lookupTable.getProperties().iterator();
			while (i.hasNext()) {
				LookupTableProperty thisProperty = i.next();
				buffer.append(",\n		'");
				buffer.append(thisProperty.getName());
				buffer.append("': " + x);
				x++;
			}
		}
		buffer.append("};\n");
		buffer.append("	fieldLabel = [\n");
		buffer.append("		'ID',\n");
		buffer.append("		'Description'");
		if (lookupTable.getProperties() != null && lookupTable.getProperties().size() > 0) {
			Iterator<LookupTableProperty> i = lookupTable.getProperties().iterator();
			while (i.hasNext()) {
				LookupTableProperty thisProperty = i.next();
				buffer.append(",\n		'");
				if (thisProperty.isDisplayOnList()) {
					buffer.append(thisProperty.getColHeading());
				}
				buffer.append("'");
			}
		}
		buffer.append("];\n");
		buffer.append("	titleText = '");
		buffer.append(lookupTable.getDisplayName() + " Selection");
		buffer.append("';\n");
		buffer.append("	baseXmlUrl = '");
		buffer.append(baseDataURL);
		buffer.append(lookupTable.getContext());
		buffer.append("/");
		buffer.append(lookupTable.getTableName());
		buffer.append(".xml';\n");
		buffer.append("	document.getElementById('containscol').style.visibility = 'visible';\n");
		buffer.append("	document.getElementById('containscol').style.display = '';\n");
		buffer.append("	startsWith = '';\n");
		buffer.append("	defaultStartsWith = '';\n");
		buffer.append("}\n");

		return buffer.toString();
	}

	/**
	 * <p>Sets the lookupTableManager.</p>
	 *
	 * @param lookupTableManager the lookupTableManager
	 */
	public void setLookupTableManager(LookupTableManager lookupTableManager) {
		this.lookupTableManager = lookupTableManager;
	}

	public String getBaseDataURL() {
		return baseDataURL;
	}

	public void setBaseDataURL(String baseDataURL) {
		this.baseDataURL = baseDataURL;
	}

	public String getServletPath() {
		return servletPath;
	}

	public void setServletPath(String servletPath) {
		this.servletPath = servletPath;
	}

	public LookupTableManager getLookupTableManager() {
		return lookupTableManager;
	}
}
